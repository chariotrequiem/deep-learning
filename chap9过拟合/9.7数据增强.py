# 当前版本 ： python3.7.11
# 开发时间 ： 2021/9/22 14:36
"""
除了上述介绍的方式可以有效检测和抑制过拟合现象之外，增加数据集规模是解决过拟合最重要的途径。
但是收集样本数据和标签往往是代价昂贵的，在有限的数据集上，通过数据增强技术可以增加训练的样本数量，获得一定程度上的性能提升。
数据增强(Data Augmentation)是指在维持样本标签不变的条件下，根据先验知识改变样本的特征，使得新产生的样本也符合或者近似符合数据的真实分布。

以图片数据为例，我们来介绍怎么做数据增强。数据集中的图片大小往往是不一致的，为了方便神经网络处理，需要将图片缩放到某个固定的大小，
如图 9.29 所示，是缩放后的固定224 × 224大小的图片。对于图中的人物图片，根据先验知识，我们知道旋转、缩放、平移、裁剪、改变视角、
遮挡某局部区域都不会改变图片的主体类别标签，因此针对图片数据，可以有多种数据增强方式。

TensorFlow 中提供了常用图片的处理函数，位于 tf.image 子模块中。通过tf.image.resize 函数可以实现图片的缩放功能，
我们将数据增强一般实现在预处理函数preprocess 中，将图片从文件系统读取进来后，即可进行图片数据增强操作。例如：
def preprocess(x,y):
    # 预处理函数
    # x: 图片的路径，y：图片的数字编码
    x = tf.io.read_file(x)
    x = tf.image.decode_jpeg(x, channels=3) # RGBA
    # 图片缩放到 244x244 大小，这个大小根据网络设定自行调整
    x = tf.image.resize(x, [244, 244])

9.7.1旋转
旋转图片是非常常见的图片数据增强方式，通过将原图进行一定角度的旋转运算，可以获得不同角度的新图片，这些图片的标签信息维持不变，如图 9.30 所示。
通过 tf.image.rot90(x, k=1)可以实现图片按逆时针方式旋转 k 个 90 度，例如：
# 图片逆时针旋转 180 度
x = tf.image.rot90(x,2)

9.7.2翻转
图片的翻转分为沿水平轴翻转和竖直轴翻转，分别如图 9.31、图 9.32 所示。在TensorFlow 中，
可以通过 tf.image.random_flip_left_right 和 tf.image.random_flip_up_down 实现图片在水平方向和竖直方向的随机翻转操作，
例如：
# 随机水平翻转
x = tf.image.random_flip_left_right(x)
# 随机竖直翻转
x = tf.image.random_flip_up_down(x)

9.7.3裁剪
通过在原图的左右或者上下方向去掉部分边缘像素，可以保持图片主体不变，同时获得新的图片样本。在实际裁剪时，
一般先将图片缩放到略大于网络输入尺寸的大小，再裁剪到合适大小。例如网络的输入大小为224 × 224，那么可以先通过 resize 函数将图片缩放
到244 × 244大小，再随机裁剪到224 × 224大小。代码实现如下：
# 图片先缩放到稍大尺寸
x = tf.image.resize(x, [244, 244])
# 再随机裁剪到合适尺寸
x = tf.image.random_crop(x, [224,224,3])

9.7.4生成数据
通过生成模型在原有数据上进行训练，学习到真实数据的分布，从而利用生成模型获得新的样本，这种方式也可以在一定程度上提升网络性能。
如通过条件生成对抗网络(Conditional GAN,简称 CGAN)可以生成带标签的样本数据，如图 9.36 所示。

9.7.5其他方式
除了上述介绍的典型图片数据增强方式以外，可以根据先验知识，在不改变图片标签信息的条件下，任意变换图片数据，获得新的图片。
图 9.37 演示了在原图上叠加高斯噪声后的图片数据，
图 9.38 演示了通过改变图片的观察视角后获得的新图片，
图 9.39 演示了在原图上随机遮挡部分区域获得的新图片
"""