# 当前版本 ： python3.7.11
# 开发时间 ： 2021/9/23 9:31
"""
在完成手写数字图片识别实战后，我们对卷积神经网络的使用有了初步的了解。现在我们来解决一个关键问题，
卷积层通过移动感受野的方式实现离散卷积操作，那么它的梯度传播是怎么进行的呢？

考虑一简单的情形，输入为3 × 3的单通道矩阵，与一个2 × 2的卷积核，进行卷积运算，输出结果打平后直接与虚构的标注计算误差，
如图 10.33 所示。我们来讨论这种情况下的梯度更新方式。

首先推导出输出张量𝑶的表达形式：
            𝑜00 = 𝑥00𝑤00 + 𝑥01𝑤01+ 𝑥10𝑤10 + 𝑥11𝑤11 + b
            𝑜01 = 𝑥01𝑤00 + 𝑥02𝑤01+ 𝑥11𝑤10 + 𝑥12𝑤11 + b
            𝑜10 = 𝑥10𝑤00 + 𝑥11𝑤01+ 𝑥20𝑤10 + 𝑥21𝑤11 + b
            𝑜11 = 𝑥11𝑤00 + 𝑥12𝑤01+ 𝑥21𝑤10 + 𝑥22𝑤11 + b
以𝑤 的梯度计算为例，通过链式法则分解：
            𝜕ℒ/∂𝑤00 = ∑ 𝜕ℒ/𝜕𝑜𝑖 . 𝜕𝑜𝑖/𝜕𝑤00
其中𝜕ℒ/𝜕𝑂𝑖可直接由误差函数推导出来，我们直接来考虑𝜕𝑂𝑖 / 𝜕𝑤𝑖，例如：
            𝜕𝑜00 / 𝜕𝑤00  = 𝜕(𝑥00𝑤00 + 𝑥01𝑤01+ 𝑥10𝑤10 + 𝑥11𝑤11 + b) / 𝑤00 = 𝑥00
同样的方法，可以推导出：
            𝜕𝑜01 / 𝜕𝑤00  = 𝜕(𝑥01𝑤00 + 𝑥02𝑤01+ 𝑥11𝑤10 + 𝑥12𝑤11 + b) / 𝑤00 = 𝑥01
            𝜕𝑜10 / 𝜕𝑤00  = 𝜕(𝑥10𝑤00 + 𝑥11𝑤01+ 𝑥20𝑤10 + 𝑥21𝑤11 + b) / 𝑤00 = 𝑥10
            𝜕𝑜11 / 𝜕𝑤00  = 𝜕(𝑥11𝑤00 + 𝑥12𝑤01+ 𝑥21𝑤10 + 𝑥22𝑤11 + b) / 𝑤00 = 𝑥11
可以观察到，通过循环移动感受野的方式并没有改变网络层可导性，同时梯度的推导也并不复杂，只是当网络层数增大以后，
人工梯度推导将变得十分的繁琐。不过不需要担心，深度学习框架可以帮我们自动完成所有参数的梯度计算与更新，
我们只需要设计好网络结构即可。
"""